// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Encedeus/panel/ent/node"
	"github.com/Encedeus/panel/ent/predicate"
	"github.com/Encedeus/panel/ent/server"
	"github.com/google/uuid"
)

// NodeUpdate is the builder for updating Node entities.
type NodeUpdate struct {
	config
	hooks    []Hook
	mutation *NodeMutation
}

// Where appends a list predicates to the NodeUpdate builder.
func (nu *NodeUpdate) Where(ps ...predicate.Node) *NodeUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NodeUpdate) SetCreatedAt(t time.Time) *NodeUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableCreatedAt(t *time.Time) *NodeUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NodeUpdate) SetUpdatedAt(t time.Time) *NodeUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetIpv4Address sets the "ipv4_address" field.
func (nu *NodeUpdate) SetIpv4Address(s string) *NodeUpdate {
	nu.mutation.SetIpv4Address(s)
	return nu
}

// SetFqdn sets the "fqdn" field.
func (nu *NodeUpdate) SetFqdn(s string) *NodeUpdate {
	nu.mutation.SetFqdn(s)
	return nu
}

// SetSkyhookVersion sets the "skyhook_version" field.
func (nu *NodeUpdate) SetSkyhookVersion(s string) *NodeUpdate {
	nu.mutation.SetSkyhookVersion(s)
	return nu
}

// SetOs sets the "os" field.
func (nu *NodeUpdate) SetOs(s string) *NodeUpdate {
	nu.mutation.SetOs(s)
	return nu
}

// SetCPU sets the "cpu" field.
func (nu *NodeUpdate) SetCPU(s string) *NodeUpdate {
	nu.mutation.SetCPU(s)
	return nu
}

// SetCPUBaseClock sets the "cpu_base_clock" field.
func (nu *NodeUpdate) SetCPUBaseClock(u uint) *NodeUpdate {
	nu.mutation.ResetCPUBaseClock()
	nu.mutation.SetCPUBaseClock(u)
	return nu
}

// AddCPUBaseClock adds u to the "cpu_base_clock" field.
func (nu *NodeUpdate) AddCPUBaseClock(u int) *NodeUpdate {
	nu.mutation.AddCPUBaseClock(u)
	return nu
}

// SetCores sets the "cores" field.
func (nu *NodeUpdate) SetCores(u uint) *NodeUpdate {
	nu.mutation.ResetCores()
	nu.mutation.SetCores(u)
	return nu
}

// AddCores adds u to the "cores" field.
func (nu *NodeUpdate) AddCores(u int) *NodeUpdate {
	nu.mutation.AddCores(u)
	return nu
}

// SetLogicalCores sets the "logical_cores" field.
func (nu *NodeUpdate) SetLogicalCores(u uint) *NodeUpdate {
	nu.mutation.ResetLogicalCores()
	nu.mutation.SetLogicalCores(u)
	return nu
}

// AddLogicalCores adds u to the "logical_cores" field.
func (nu *NodeUpdate) AddLogicalCores(u int) *NodeUpdate {
	nu.mutation.AddLogicalCores(u)
	return nu
}

// SetRAM sets the "ram" field.
func (nu *NodeUpdate) SetRAM(u uint) *NodeUpdate {
	nu.mutation.ResetRAM()
	nu.mutation.SetRAM(u)
	return nu
}

// AddRAM adds u to the "ram" field.
func (nu *NodeUpdate) AddRAM(u int) *NodeUpdate {
	nu.mutation.AddRAM(u)
	return nu
}

// SetStorage sets the "storage" field.
func (nu *NodeUpdate) SetStorage(u uint) *NodeUpdate {
	nu.mutation.ResetStorage()
	nu.mutation.SetStorage(u)
	return nu
}

// AddStorage adds u to the "storage" field.
func (nu *NodeUpdate) AddStorage(u int) *NodeUpdate {
	nu.mutation.AddStorage(u)
	return nu
}

// AddNodeIDs adds the "nodes" edge to the Server entity by IDs.
func (nu *NodeUpdate) AddNodeIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.AddNodeIDs(ids...)
	return nu
}

// AddNodes adds the "nodes" edges to the Server entity.
func (nu *NodeUpdate) AddNodes(s ...*Server) *NodeUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.AddNodeIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nu *NodeUpdate) Mutation() *NodeMutation {
	return nu.mutation
}

// ClearNodes clears all "nodes" edges to the Server entity.
func (nu *NodeUpdate) ClearNodes() *NodeUpdate {
	nu.mutation.ClearNodes()
	return nu
}

// RemoveNodeIDs removes the "nodes" edge to Server entities by IDs.
func (nu *NodeUpdate) RemoveNodeIDs(ids ...uuid.UUID) *NodeUpdate {
	nu.mutation.RemoveNodeIDs(ids...)
	return nu
}

// RemoveNodes removes "nodes" edges to Server entities.
func (nu *NodeUpdate) RemoveNodes(s ...*Server) *NodeUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.RemoveNodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NodeUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NodeUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NodeUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NodeUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NodeUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := node.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

func (nu *NodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(node.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.Ipv4Address(); ok {
		_spec.SetField(node.FieldIpv4Address, field.TypeString, value)
	}
	if value, ok := nu.mutation.Fqdn(); ok {
		_spec.SetField(node.FieldFqdn, field.TypeString, value)
	}
	if value, ok := nu.mutation.SkyhookVersion(); ok {
		_spec.SetField(node.FieldSkyhookVersion, field.TypeString, value)
	}
	if value, ok := nu.mutation.Os(); ok {
		_spec.SetField(node.FieldOs, field.TypeString, value)
	}
	if value, ok := nu.mutation.CPU(); ok {
		_spec.SetField(node.FieldCPU, field.TypeString, value)
	}
	if value, ok := nu.mutation.CPUBaseClock(); ok {
		_spec.SetField(node.FieldCPUBaseClock, field.TypeUint, value)
	}
	if value, ok := nu.mutation.AddedCPUBaseClock(); ok {
		_spec.AddField(node.FieldCPUBaseClock, field.TypeUint, value)
	}
	if value, ok := nu.mutation.Cores(); ok {
		_spec.SetField(node.FieldCores, field.TypeUint, value)
	}
	if value, ok := nu.mutation.AddedCores(); ok {
		_spec.AddField(node.FieldCores, field.TypeUint, value)
	}
	if value, ok := nu.mutation.LogicalCores(); ok {
		_spec.SetField(node.FieldLogicalCores, field.TypeUint, value)
	}
	if value, ok := nu.mutation.AddedLogicalCores(); ok {
		_spec.AddField(node.FieldLogicalCores, field.TypeUint, value)
	}
	if value, ok := nu.mutation.RAM(); ok {
		_spec.SetField(node.FieldRAM, field.TypeUint, value)
	}
	if value, ok := nu.mutation.AddedRAM(); ok {
		_spec.AddField(node.FieldRAM, field.TypeUint, value)
	}
	if value, ok := nu.mutation.Storage(); ok {
		_spec.SetField(node.FieldStorage, field.TypeUint, value)
	}
	if value, ok := nu.mutation.AddedStorage(); ok {
		_spec.AddField(node.FieldStorage, field.TypeUint, value)
	}
	if nu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: []string{node.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodesIDs(); len(nodes) > 0 && !nu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: []string{node.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: []string{node.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NodeUpdateOne is the builder for updating a single Node entity.
type NodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeMutation
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NodeUpdateOne) SetCreatedAt(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableCreatedAt(t *time.Time) *NodeUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NodeUpdateOne) SetUpdatedAt(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetIpv4Address sets the "ipv4_address" field.
func (nuo *NodeUpdateOne) SetIpv4Address(s string) *NodeUpdateOne {
	nuo.mutation.SetIpv4Address(s)
	return nuo
}

// SetFqdn sets the "fqdn" field.
func (nuo *NodeUpdateOne) SetFqdn(s string) *NodeUpdateOne {
	nuo.mutation.SetFqdn(s)
	return nuo
}

// SetSkyhookVersion sets the "skyhook_version" field.
func (nuo *NodeUpdateOne) SetSkyhookVersion(s string) *NodeUpdateOne {
	nuo.mutation.SetSkyhookVersion(s)
	return nuo
}

// SetOs sets the "os" field.
func (nuo *NodeUpdateOne) SetOs(s string) *NodeUpdateOne {
	nuo.mutation.SetOs(s)
	return nuo
}

// SetCPU sets the "cpu" field.
func (nuo *NodeUpdateOne) SetCPU(s string) *NodeUpdateOne {
	nuo.mutation.SetCPU(s)
	return nuo
}

// SetCPUBaseClock sets the "cpu_base_clock" field.
func (nuo *NodeUpdateOne) SetCPUBaseClock(u uint) *NodeUpdateOne {
	nuo.mutation.ResetCPUBaseClock()
	nuo.mutation.SetCPUBaseClock(u)
	return nuo
}

// AddCPUBaseClock adds u to the "cpu_base_clock" field.
func (nuo *NodeUpdateOne) AddCPUBaseClock(u int) *NodeUpdateOne {
	nuo.mutation.AddCPUBaseClock(u)
	return nuo
}

// SetCores sets the "cores" field.
func (nuo *NodeUpdateOne) SetCores(u uint) *NodeUpdateOne {
	nuo.mutation.ResetCores()
	nuo.mutation.SetCores(u)
	return nuo
}

// AddCores adds u to the "cores" field.
func (nuo *NodeUpdateOne) AddCores(u int) *NodeUpdateOne {
	nuo.mutation.AddCores(u)
	return nuo
}

// SetLogicalCores sets the "logical_cores" field.
func (nuo *NodeUpdateOne) SetLogicalCores(u uint) *NodeUpdateOne {
	nuo.mutation.ResetLogicalCores()
	nuo.mutation.SetLogicalCores(u)
	return nuo
}

// AddLogicalCores adds u to the "logical_cores" field.
func (nuo *NodeUpdateOne) AddLogicalCores(u int) *NodeUpdateOne {
	nuo.mutation.AddLogicalCores(u)
	return nuo
}

// SetRAM sets the "ram" field.
func (nuo *NodeUpdateOne) SetRAM(u uint) *NodeUpdateOne {
	nuo.mutation.ResetRAM()
	nuo.mutation.SetRAM(u)
	return nuo
}

// AddRAM adds u to the "ram" field.
func (nuo *NodeUpdateOne) AddRAM(u int) *NodeUpdateOne {
	nuo.mutation.AddRAM(u)
	return nuo
}

// SetStorage sets the "storage" field.
func (nuo *NodeUpdateOne) SetStorage(u uint) *NodeUpdateOne {
	nuo.mutation.ResetStorage()
	nuo.mutation.SetStorage(u)
	return nuo
}

// AddStorage adds u to the "storage" field.
func (nuo *NodeUpdateOne) AddStorage(u int) *NodeUpdateOne {
	nuo.mutation.AddStorage(u)
	return nuo
}

// AddNodeIDs adds the "nodes" edge to the Server entity by IDs.
func (nuo *NodeUpdateOne) AddNodeIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.AddNodeIDs(ids...)
	return nuo
}

// AddNodes adds the "nodes" edges to the Server entity.
func (nuo *NodeUpdateOne) AddNodes(s ...*Server) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.AddNodeIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nuo *NodeUpdateOne) Mutation() *NodeMutation {
	return nuo.mutation
}

// ClearNodes clears all "nodes" edges to the Server entity.
func (nuo *NodeUpdateOne) ClearNodes() *NodeUpdateOne {
	nuo.mutation.ClearNodes()
	return nuo
}

// RemoveNodeIDs removes the "nodes" edge to Server entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodeIDs(ids ...uuid.UUID) *NodeUpdateOne {
	nuo.mutation.RemoveNodeIDs(ids...)
	return nuo
}

// RemoveNodes removes "nodes" edges to Server entities.
func (nuo *NodeUpdateOne) RemoveNodes(s ...*Server) *NodeUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.RemoveNodeIDs(ids...)
}

// Where appends a list predicates to the NodeUpdate builder.
func (nuo *NodeUpdateOne) Where(ps ...predicate.Node) *NodeUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NodeUpdateOne) Select(field string, fields ...string) *NodeUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Node entity.
func (nuo *NodeUpdateOne) Save(ctx context.Context) (*Node, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NodeUpdateOne) SaveX(ctx context.Context) *Node {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NodeUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NodeUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NodeUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := node.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

func (nuo *NodeUpdateOne) sqlSave(ctx context.Context) (_node *Node, err error) {
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Node.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, node.FieldID)
		for _, f := range fields {
			if !node.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != node.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(node.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.Ipv4Address(); ok {
		_spec.SetField(node.FieldIpv4Address, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Fqdn(); ok {
		_spec.SetField(node.FieldFqdn, field.TypeString, value)
	}
	if value, ok := nuo.mutation.SkyhookVersion(); ok {
		_spec.SetField(node.FieldSkyhookVersion, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Os(); ok {
		_spec.SetField(node.FieldOs, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CPU(); ok {
		_spec.SetField(node.FieldCPU, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CPUBaseClock(); ok {
		_spec.SetField(node.FieldCPUBaseClock, field.TypeUint, value)
	}
	if value, ok := nuo.mutation.AddedCPUBaseClock(); ok {
		_spec.AddField(node.FieldCPUBaseClock, field.TypeUint, value)
	}
	if value, ok := nuo.mutation.Cores(); ok {
		_spec.SetField(node.FieldCores, field.TypeUint, value)
	}
	if value, ok := nuo.mutation.AddedCores(); ok {
		_spec.AddField(node.FieldCores, field.TypeUint, value)
	}
	if value, ok := nuo.mutation.LogicalCores(); ok {
		_spec.SetField(node.FieldLogicalCores, field.TypeUint, value)
	}
	if value, ok := nuo.mutation.AddedLogicalCores(); ok {
		_spec.AddField(node.FieldLogicalCores, field.TypeUint, value)
	}
	if value, ok := nuo.mutation.RAM(); ok {
		_spec.SetField(node.FieldRAM, field.TypeUint, value)
	}
	if value, ok := nuo.mutation.AddedRAM(); ok {
		_spec.AddField(node.FieldRAM, field.TypeUint, value)
	}
	if value, ok := nuo.mutation.Storage(); ok {
		_spec.SetField(node.FieldStorage, field.TypeUint, value)
	}
	if value, ok := nuo.mutation.AddedStorage(); ok {
		_spec.AddField(node.FieldStorage, field.TypeUint, value)
	}
	if nuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: []string{node.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !nuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: []string{node.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: []string{node.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Node{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
