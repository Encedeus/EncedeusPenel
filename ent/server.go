// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Encedeus/panel/ent/node"
	"github.com/Encedeus/panel/ent/server"
	"github.com/Encedeus/panel/ent/user"
	"github.com/google/uuid"
)

// Server is the model entity for the Server schema.
type Server struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// RAM holds the value of the "ram" field.
	RAM uint64 `json:"ram,omitempty"`
	// Storage holds the value of the "storage" field.
	Storage uint64 `json:"storage,omitempty"`
	// LogicalCores holds the value of the "logical_cores" field.
	LogicalCores uint `json:"logical_cores,omitempty"`
	// Port holds the value of the "port" field.
	Port uint16 `json:"port,omitempty"`
	// CraterProvider holds the value of the "crater_provider" field.
	CraterProvider string `json:"crater_provider,omitempty"`
	// Crater holds the value of the "crater" field.
	Crater string `json:"crater,omitempty"`
	// CraterVariant holds the value of the "crater_variant" field.
	CraterVariant string `json:"crater_variant,omitempty"`
	// CraterOptions holds the value of the "crater_options" field.
	CraterOptions any `json:"crater_options,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerQuery when eager-loading is set.
	Edges        ServerEdges `json:"edges"`
	game_games   *uuid.UUID
	node_nodes   *uuid.UUID
	user_owners  *uuid.UUID
	selectValues sql.SelectValues
}

// ServerEdges holds the relations/edges for other nodes in the graph.
type ServerEdges struct {
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerEdges) NodeOrErr() (*Node, error) {
	if e.loadedTypes[0] {
		if e.Node == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: node.Label}
		}
		return e.Node, nil
	}
	return nil, &NotLoadedError{edge: "node"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Server) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case server.FieldCraterOptions:
			values[i] = new([]byte)
		case server.FieldRAM, server.FieldStorage, server.FieldLogicalCores, server.FieldPort:
			values[i] = new(sql.NullInt64)
		case server.FieldName, server.FieldCraterProvider, server.FieldCrater, server.FieldCraterVariant:
			values[i] = new(sql.NullString)
		case server.FieldCreatedAt, server.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case server.FieldID:
			values[i] = new(uuid.UUID)
		case server.ForeignKeys[0]: // game_games
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case server.ForeignKeys[1]: // node_nodes
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case server.ForeignKeys[2]: // user_owners
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Server fields.
func (s *Server) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case server.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case server.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case server.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case server.FieldRAM:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ram", values[i])
			} else if value.Valid {
				s.RAM = uint64(value.Int64)
			}
		case server.FieldStorage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field storage", values[i])
			} else if value.Valid {
				s.Storage = uint64(value.Int64)
			}
		case server.FieldLogicalCores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field logical_cores", values[i])
			} else if value.Valid {
				s.LogicalCores = uint(value.Int64)
			}
		case server.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				s.Port = uint16(value.Int64)
			}
		case server.FieldCraterProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field crater_provider", values[i])
			} else if value.Valid {
				s.CraterProvider = value.String
			}
		case server.FieldCrater:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field crater", values[i])
			} else if value.Valid {
				s.Crater = value.String
			}
		case server.FieldCraterVariant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field crater_variant", values[i])
			} else if value.Valid {
				s.CraterVariant = value.String
			}
		case server.FieldCraterOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field crater_options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.CraterOptions); err != nil {
					return fmt.Errorf("unmarshal field crater_options: %w", err)
				}
			}
		case server.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field game_games", values[i])
			} else if value.Valid {
				s.game_games = new(uuid.UUID)
				*s.game_games = *value.S.(*uuid.UUID)
			}
		case server.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field node_nodes", values[i])
			} else if value.Valid {
				s.node_nodes = new(uuid.UUID)
				*s.node_nodes = *value.S.(*uuid.UUID)
			}
		case server.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_owners", values[i])
			} else if value.Valid {
				s.user_owners = new(uuid.UUID)
				*s.user_owners = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Server.
// This includes values selected through modifiers, order, etc.
func (s *Server) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryNode queries the "node" edge of the Server entity.
func (s *Server) QueryNode() *NodeQuery {
	return NewServerClient(s.config).QueryNode(s)
}

// QueryOwner queries the "owner" edge of the Server entity.
func (s *Server) QueryOwner() *UserQuery {
	return NewServerClient(s.config).QueryOwner(s)
}

// Update returns a builder for updating this Server.
// Note that you need to call Server.Unwrap() before calling this method if this Server
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Server) Update() *ServerUpdateOne {
	return NewServerClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Server entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Server) Unwrap() *Server {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Server is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Server) String() string {
	var builder strings.Builder
	builder.WriteString("Server(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("ram=")
	builder.WriteString(fmt.Sprintf("%v", s.RAM))
	builder.WriteString(", ")
	builder.WriteString("storage=")
	builder.WriteString(fmt.Sprintf("%v", s.Storage))
	builder.WriteString(", ")
	builder.WriteString("logical_cores=")
	builder.WriteString(fmt.Sprintf("%v", s.LogicalCores))
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", s.Port))
	builder.WriteString(", ")
	builder.WriteString("crater_provider=")
	builder.WriteString(s.CraterProvider)
	builder.WriteString(", ")
	builder.WriteString("crater=")
	builder.WriteString(s.Crater)
	builder.WriteString(", ")
	builder.WriteString("crater_variant=")
	builder.WriteString(s.CraterVariant)
	builder.WriteString(", ")
	builder.WriteString("crater_options=")
	builder.WriteString(fmt.Sprintf("%v", s.CraterOptions))
	builder.WriteByte(')')
	return builder.String()
}

// Servers is a parsable slice of Server.
type Servers []*Server
