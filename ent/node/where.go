// Code generated by ent, DO NOT EDIT.

package node

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Encedeus/panel/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldUpdatedAt, v))
}

// Ipv4Address applies equality check predicate on the "ipv4_address" field. It's identical to Ipv4AddressEQ.
func Ipv4Address(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIpv4Address, v))
}

// Fqdn applies equality check predicate on the "fqdn" field. It's identical to FqdnEQ.
func Fqdn(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFqdn, v))
}

// SkyhookVersion applies equality check predicate on the "skyhook_version" field. It's identical to SkyhookVersionEQ.
func SkyhookVersion(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldSkyhookVersion, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldOs, v))
}

// CPU applies equality check predicate on the "cpu" field. It's identical to CPUEQ.
func CPU(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCPU, v))
}

// CPUBaseClock applies equality check predicate on the "cpu_base_clock" field. It's identical to CPUBaseClockEQ.
func CPUBaseClock(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCPUBaseClock, v))
}

// Cores applies equality check predicate on the "cores" field. It's identical to CoresEQ.
func Cores(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCores, v))
}

// LogicalCores applies equality check predicate on the "logical_cores" field. It's identical to LogicalCoresEQ.
func LogicalCores(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldLogicalCores, v))
}

// RAM applies equality check predicate on the "ram" field. It's identical to RAMEQ.
func RAM(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldRAM, v))
}

// Storage applies equality check predicate on the "storage" field. It's identical to StorageEQ.
func Storage(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldStorage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldUpdatedAt, v))
}

// Ipv4AddressEQ applies the EQ predicate on the "ipv4_address" field.
func Ipv4AddressEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIpv4Address, v))
}

// Ipv4AddressNEQ applies the NEQ predicate on the "ipv4_address" field.
func Ipv4AddressNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldIpv4Address, v))
}

// Ipv4AddressIn applies the In predicate on the "ipv4_address" field.
func Ipv4AddressIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldIpv4Address, vs...))
}

// Ipv4AddressNotIn applies the NotIn predicate on the "ipv4_address" field.
func Ipv4AddressNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldIpv4Address, vs...))
}

// Ipv4AddressGT applies the GT predicate on the "ipv4_address" field.
func Ipv4AddressGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldIpv4Address, v))
}

// Ipv4AddressGTE applies the GTE predicate on the "ipv4_address" field.
func Ipv4AddressGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldIpv4Address, v))
}

// Ipv4AddressLT applies the LT predicate on the "ipv4_address" field.
func Ipv4AddressLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldIpv4Address, v))
}

// Ipv4AddressLTE applies the LTE predicate on the "ipv4_address" field.
func Ipv4AddressLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldIpv4Address, v))
}

// Ipv4AddressContains applies the Contains predicate on the "ipv4_address" field.
func Ipv4AddressContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldIpv4Address, v))
}

// Ipv4AddressHasPrefix applies the HasPrefix predicate on the "ipv4_address" field.
func Ipv4AddressHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldIpv4Address, v))
}

// Ipv4AddressHasSuffix applies the HasSuffix predicate on the "ipv4_address" field.
func Ipv4AddressHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldIpv4Address, v))
}

// Ipv4AddressEqualFold applies the EqualFold predicate on the "ipv4_address" field.
func Ipv4AddressEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldIpv4Address, v))
}

// Ipv4AddressContainsFold applies the ContainsFold predicate on the "ipv4_address" field.
func Ipv4AddressContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldIpv4Address, v))
}

// FqdnEQ applies the EQ predicate on the "fqdn" field.
func FqdnEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFqdn, v))
}

// FqdnNEQ applies the NEQ predicate on the "fqdn" field.
func FqdnNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldFqdn, v))
}

// FqdnIn applies the In predicate on the "fqdn" field.
func FqdnIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldFqdn, vs...))
}

// FqdnNotIn applies the NotIn predicate on the "fqdn" field.
func FqdnNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldFqdn, vs...))
}

// FqdnGT applies the GT predicate on the "fqdn" field.
func FqdnGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldFqdn, v))
}

// FqdnGTE applies the GTE predicate on the "fqdn" field.
func FqdnGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldFqdn, v))
}

// FqdnLT applies the LT predicate on the "fqdn" field.
func FqdnLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldFqdn, v))
}

// FqdnLTE applies the LTE predicate on the "fqdn" field.
func FqdnLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldFqdn, v))
}

// FqdnContains applies the Contains predicate on the "fqdn" field.
func FqdnContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldFqdn, v))
}

// FqdnHasPrefix applies the HasPrefix predicate on the "fqdn" field.
func FqdnHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldFqdn, v))
}

// FqdnHasSuffix applies the HasSuffix predicate on the "fqdn" field.
func FqdnHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldFqdn, v))
}

// FqdnEqualFold applies the EqualFold predicate on the "fqdn" field.
func FqdnEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldFqdn, v))
}

// FqdnContainsFold applies the ContainsFold predicate on the "fqdn" field.
func FqdnContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldFqdn, v))
}

// SkyhookVersionEQ applies the EQ predicate on the "skyhook_version" field.
func SkyhookVersionEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldSkyhookVersion, v))
}

// SkyhookVersionNEQ applies the NEQ predicate on the "skyhook_version" field.
func SkyhookVersionNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldSkyhookVersion, v))
}

// SkyhookVersionIn applies the In predicate on the "skyhook_version" field.
func SkyhookVersionIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldSkyhookVersion, vs...))
}

// SkyhookVersionNotIn applies the NotIn predicate on the "skyhook_version" field.
func SkyhookVersionNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldSkyhookVersion, vs...))
}

// SkyhookVersionGT applies the GT predicate on the "skyhook_version" field.
func SkyhookVersionGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldSkyhookVersion, v))
}

// SkyhookVersionGTE applies the GTE predicate on the "skyhook_version" field.
func SkyhookVersionGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldSkyhookVersion, v))
}

// SkyhookVersionLT applies the LT predicate on the "skyhook_version" field.
func SkyhookVersionLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldSkyhookVersion, v))
}

// SkyhookVersionLTE applies the LTE predicate on the "skyhook_version" field.
func SkyhookVersionLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldSkyhookVersion, v))
}

// SkyhookVersionContains applies the Contains predicate on the "skyhook_version" field.
func SkyhookVersionContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldSkyhookVersion, v))
}

// SkyhookVersionHasPrefix applies the HasPrefix predicate on the "skyhook_version" field.
func SkyhookVersionHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldSkyhookVersion, v))
}

// SkyhookVersionHasSuffix applies the HasSuffix predicate on the "skyhook_version" field.
func SkyhookVersionHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldSkyhookVersion, v))
}

// SkyhookVersionEqualFold applies the EqualFold predicate on the "skyhook_version" field.
func SkyhookVersionEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldSkyhookVersion, v))
}

// SkyhookVersionContainsFold applies the ContainsFold predicate on the "skyhook_version" field.
func SkyhookVersionContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldSkyhookVersion, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldOs, v))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldOs, v))
}

// CPUEQ applies the EQ predicate on the "cpu" field.
func CPUEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCPU, v))
}

// CPUNEQ applies the NEQ predicate on the "cpu" field.
func CPUNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldCPU, v))
}

// CPUIn applies the In predicate on the "cpu" field.
func CPUIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldCPU, vs...))
}

// CPUNotIn applies the NotIn predicate on the "cpu" field.
func CPUNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldCPU, vs...))
}

// CPUGT applies the GT predicate on the "cpu" field.
func CPUGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldCPU, v))
}

// CPUGTE applies the GTE predicate on the "cpu" field.
func CPUGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldCPU, v))
}

// CPULT applies the LT predicate on the "cpu" field.
func CPULT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldCPU, v))
}

// CPULTE applies the LTE predicate on the "cpu" field.
func CPULTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldCPU, v))
}

// CPUContains applies the Contains predicate on the "cpu" field.
func CPUContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldCPU, v))
}

// CPUHasPrefix applies the HasPrefix predicate on the "cpu" field.
func CPUHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldCPU, v))
}

// CPUHasSuffix applies the HasSuffix predicate on the "cpu" field.
func CPUHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldCPU, v))
}

// CPUEqualFold applies the EqualFold predicate on the "cpu" field.
func CPUEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldCPU, v))
}

// CPUContainsFold applies the ContainsFold predicate on the "cpu" field.
func CPUContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldCPU, v))
}

// CPUBaseClockEQ applies the EQ predicate on the "cpu_base_clock" field.
func CPUBaseClockEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCPUBaseClock, v))
}

// CPUBaseClockNEQ applies the NEQ predicate on the "cpu_base_clock" field.
func CPUBaseClockNEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldCPUBaseClock, v))
}

// CPUBaseClockIn applies the In predicate on the "cpu_base_clock" field.
func CPUBaseClockIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldCPUBaseClock, vs...))
}

// CPUBaseClockNotIn applies the NotIn predicate on the "cpu_base_clock" field.
func CPUBaseClockNotIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldCPUBaseClock, vs...))
}

// CPUBaseClockGT applies the GT predicate on the "cpu_base_clock" field.
func CPUBaseClockGT(v uint) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldCPUBaseClock, v))
}

// CPUBaseClockGTE applies the GTE predicate on the "cpu_base_clock" field.
func CPUBaseClockGTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldCPUBaseClock, v))
}

// CPUBaseClockLT applies the LT predicate on the "cpu_base_clock" field.
func CPUBaseClockLT(v uint) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldCPUBaseClock, v))
}

// CPUBaseClockLTE applies the LTE predicate on the "cpu_base_clock" field.
func CPUBaseClockLTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldCPUBaseClock, v))
}

// CoresEQ applies the EQ predicate on the "cores" field.
func CoresEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCores, v))
}

// CoresNEQ applies the NEQ predicate on the "cores" field.
func CoresNEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldCores, v))
}

// CoresIn applies the In predicate on the "cores" field.
func CoresIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldCores, vs...))
}

// CoresNotIn applies the NotIn predicate on the "cores" field.
func CoresNotIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldCores, vs...))
}

// CoresGT applies the GT predicate on the "cores" field.
func CoresGT(v uint) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldCores, v))
}

// CoresGTE applies the GTE predicate on the "cores" field.
func CoresGTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldCores, v))
}

// CoresLT applies the LT predicate on the "cores" field.
func CoresLT(v uint) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldCores, v))
}

// CoresLTE applies the LTE predicate on the "cores" field.
func CoresLTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldCores, v))
}

// LogicalCoresEQ applies the EQ predicate on the "logical_cores" field.
func LogicalCoresEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldLogicalCores, v))
}

// LogicalCoresNEQ applies the NEQ predicate on the "logical_cores" field.
func LogicalCoresNEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldLogicalCores, v))
}

// LogicalCoresIn applies the In predicate on the "logical_cores" field.
func LogicalCoresIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldLogicalCores, vs...))
}

// LogicalCoresNotIn applies the NotIn predicate on the "logical_cores" field.
func LogicalCoresNotIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldLogicalCores, vs...))
}

// LogicalCoresGT applies the GT predicate on the "logical_cores" field.
func LogicalCoresGT(v uint) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldLogicalCores, v))
}

// LogicalCoresGTE applies the GTE predicate on the "logical_cores" field.
func LogicalCoresGTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldLogicalCores, v))
}

// LogicalCoresLT applies the LT predicate on the "logical_cores" field.
func LogicalCoresLT(v uint) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldLogicalCores, v))
}

// LogicalCoresLTE applies the LTE predicate on the "logical_cores" field.
func LogicalCoresLTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldLogicalCores, v))
}

// RAMEQ applies the EQ predicate on the "ram" field.
func RAMEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldRAM, v))
}

// RAMNEQ applies the NEQ predicate on the "ram" field.
func RAMNEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldRAM, v))
}

// RAMIn applies the In predicate on the "ram" field.
func RAMIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldRAM, vs...))
}

// RAMNotIn applies the NotIn predicate on the "ram" field.
func RAMNotIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldRAM, vs...))
}

// RAMGT applies the GT predicate on the "ram" field.
func RAMGT(v uint) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldRAM, v))
}

// RAMGTE applies the GTE predicate on the "ram" field.
func RAMGTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldRAM, v))
}

// RAMLT applies the LT predicate on the "ram" field.
func RAMLT(v uint) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldRAM, v))
}

// RAMLTE applies the LTE predicate on the "ram" field.
func RAMLTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldRAM, v))
}

// StorageEQ applies the EQ predicate on the "storage" field.
func StorageEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldStorage, v))
}

// StorageNEQ applies the NEQ predicate on the "storage" field.
func StorageNEQ(v uint) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldStorage, v))
}

// StorageIn applies the In predicate on the "storage" field.
func StorageIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldStorage, vs...))
}

// StorageNotIn applies the NotIn predicate on the "storage" field.
func StorageNotIn(vs ...uint) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldStorage, vs...))
}

// StorageGT applies the GT predicate on the "storage" field.
func StorageGT(v uint) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldStorage, v))
}

// StorageGTE applies the GTE predicate on the "storage" field.
func StorageGTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldStorage, v))
}

// StorageLT applies the LT predicate on the "storage" field.
func StorageLT(v uint) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldStorage, v))
}

// StorageLTE applies the LTE predicate on the "storage" field.
func StorageLTE(v uint) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldStorage, v))
}

// HasNodes applies the HasEdge predicate on the "nodes" edge.
func HasNodes() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NodesTable, NodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodesWith applies the HasEdge predicate on the "nodes" edge with a given conditions (other predicates).
func HasNodesWith(preds ...predicate.Server) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newNodesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Node) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		p(s.Not())
	})
}
