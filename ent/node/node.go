// Code generated by ent, DO NOT EDIT.

package node

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the node type in the database.
	Label = "node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIpv4Address holds the string denoting the ipv4_address field in the database.
	FieldIpv4Address = "ipv4_address"
	// FieldFqdn holds the string denoting the fqdn field in the database.
	FieldFqdn = "fqdn"
	// FieldSkyhookVersion holds the string denoting the skyhook_version field in the database.
	FieldSkyhookVersion = "skyhook_version"
	// FieldSkyhookAPIKey holds the string denoting the skyhook_api_key field in the database.
	FieldSkyhookAPIKey = "skyhook_api_key"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldCPU holds the string denoting the cpu field in the database.
	FieldCPU = "cpu"
	// FieldCPUBaseClock holds the string denoting the cpu_base_clock field in the database.
	FieldCPUBaseClock = "cpu_base_clock"
	// FieldCores holds the string denoting the cores field in the database.
	FieldCores = "cores"
	// FieldLogicalCores holds the string denoting the logical_cores field in the database.
	FieldLogicalCores = "logical_cores"
	// FieldRAM holds the string denoting the ram field in the database.
	FieldRAM = "ram"
	// FieldStorage holds the string denoting the storage field in the database.
	FieldStorage = "storage"
	// EdgeNodes holds the string denoting the nodes edge name in mutations.
	EdgeNodes = "nodes"
	// Table holds the table name of the node in the database.
	Table = "nodes"
	// NodesTable is the table that holds the nodes relation/edge.
	NodesTable = "servers"
	// NodesInverseTable is the table name for the Server entity.
	// It exists in this package in order to avoid circular dependency with the "server" package.
	NodesInverseTable = "servers"
	// NodesColumn is the table column denoting the nodes relation/edge.
	NodesColumn = "node_nodes"
)

// Columns holds all SQL columns for node fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldIpv4Address,
	FieldFqdn,
	FieldSkyhookVersion,
	FieldSkyhookAPIKey,
	FieldOs,
	FieldCPU,
	FieldCPUBaseClock,
	FieldCores,
	FieldLogicalCores,
	FieldRAM,
	FieldStorage,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Node queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIpv4Address orders the results by the ipv4_address field.
func ByIpv4Address(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIpv4Address, opts...).ToFunc()
}

// ByFqdn orders the results by the fqdn field.
func ByFqdn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFqdn, opts...).ToFunc()
}

// BySkyhookVersion orders the results by the skyhook_version field.
func BySkyhookVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkyhookVersion, opts...).ToFunc()
}

// BySkyhookAPIKey orders the results by the skyhook_api_key field.
func BySkyhookAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkyhookAPIKey, opts...).ToFunc()
}

// ByOs orders the results by the os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByCPU orders the results by the cpu field.
func ByCPU(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPU, opts...).ToFunc()
}

// ByCPUBaseClock orders the results by the cpu_base_clock field.
func ByCPUBaseClock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUBaseClock, opts...).ToFunc()
}

// ByCores orders the results by the cores field.
func ByCores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCores, opts...).ToFunc()
}

// ByLogicalCores orders the results by the logical_cores field.
func ByLogicalCores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogicalCores, opts...).ToFunc()
}

// ByRAM orders the results by the ram field.
func ByRAM(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRAM, opts...).ToFunc()
}

// ByStorage orders the results by the storage field.
func ByStorage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorage, opts...).ToFunc()
}

// ByNodesCount orders the results by nodes count.
func ByNodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodesStep(), opts...)
	}
}

// ByNodes orders the results by nodes terms.
func ByNodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodesTable, NodesColumn),
	)
}
