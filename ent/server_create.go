// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Encedeus/panel/ent/node"
	"github.com/Encedeus/panel/ent/server"
	"github.com/Encedeus/panel/ent/user"
	"github.com/google/uuid"
)

// ServerCreate is the builder for creating a Server entity.
type ServerCreate struct {
	config
	mutation *ServerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *ServerCreate) SetCreatedAt(t time.Time) *ServerCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ServerCreate) SetNillableCreatedAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ServerCreate) SetUpdatedAt(t time.Time) *ServerCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ServerCreate) SetNillableUpdatedAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *ServerCreate) SetName(s string) *ServerCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetRAM sets the "ram" field.
func (sc *ServerCreate) SetRAM(u uint64) *ServerCreate {
	sc.mutation.SetRAM(u)
	return sc
}

// SetStorage sets the "storage" field.
func (sc *ServerCreate) SetStorage(u uint64) *ServerCreate {
	sc.mutation.SetStorage(u)
	return sc
}

// SetLogicalCores sets the "logical_cores" field.
func (sc *ServerCreate) SetLogicalCores(u uint) *ServerCreate {
	sc.mutation.SetLogicalCores(u)
	return sc
}

// SetPort sets the "port" field.
func (sc *ServerCreate) SetPort(u uint) *ServerCreate {
	sc.mutation.SetPort(u)
	return sc
}

// SetCraterProvider sets the "crater_provider" field.
func (sc *ServerCreate) SetCraterProvider(s string) *ServerCreate {
	sc.mutation.SetCraterProvider(s)
	return sc
}

// SetCrater sets the "crater" field.
func (sc *ServerCreate) SetCrater(s string) *ServerCreate {
	sc.mutation.SetCrater(s)
	return sc
}

// SetCraterVariant sets the "crater_variant" field.
func (sc *ServerCreate) SetCraterVariant(s string) *ServerCreate {
	sc.mutation.SetCraterVariant(s)
	return sc
}

// SetCraterOptions sets the "crater_options" field.
func (sc *ServerCreate) SetCraterOptions(a any) *ServerCreate {
	sc.mutation.SetCraterOptions(a)
	return sc
}

// SetContainerId sets the "containerId" field.
func (sc *ServerCreate) SetContainerId(s string) *ServerCreate {
	sc.mutation.SetContainerId(s)
	return sc
}

// SetSftpPassword sets the "sftp_password" field.
func (sc *ServerCreate) SetSftpPassword(s string) *ServerCreate {
	sc.mutation.SetSftpPassword(s)
	return sc
}

// SetID sets the "id" field.
func (sc *ServerCreate) SetID(u uuid.UUID) *ServerCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ServerCreate) SetNillableID(u *uuid.UUID) *ServerCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (sc *ServerCreate) SetNodeID(id uuid.UUID) *ServerCreate {
	sc.mutation.SetNodeID(id)
	return sc
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (sc *ServerCreate) SetNillableNodeID(id *uuid.UUID) *ServerCreate {
	if id != nil {
		sc = sc.SetNodeID(*id)
	}
	return sc
}

// SetNode sets the "node" edge to the Node entity.
func (sc *ServerCreate) SetNode(n *Node) *ServerCreate {
	return sc.SetNodeID(n.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (sc *ServerCreate) SetOwnerID(id uuid.UUID) *ServerCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (sc *ServerCreate) SetNillableOwnerID(id *uuid.UUID) *ServerCreate {
	if id != nil {
		sc = sc.SetOwnerID(*id)
	}
	return sc
}

// SetOwner sets the "owner" edge to the User entity.
func (sc *ServerCreate) SetOwner(u *User) *ServerCreate {
	return sc.SetOwnerID(u.ID)
}

// Mutation returns the ServerMutation object of the builder.
func (sc *ServerCreate) Mutation() *ServerMutation {
	return sc.mutation
}

// Save creates the Server in the database.
func (sc *ServerCreate) Save(ctx context.Context) (*Server, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServerCreate) SaveX(ctx context.Context) *Server {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ServerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ServerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ServerCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := server.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := server.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := server.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServerCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Server.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Server.updated_at"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Server.name"`)}
	}
	if _, ok := sc.mutation.RAM(); !ok {
		return &ValidationError{Name: "ram", err: errors.New(`ent: missing required field "Server.ram"`)}
	}
	if _, ok := sc.mutation.Storage(); !ok {
		return &ValidationError{Name: "storage", err: errors.New(`ent: missing required field "Server.storage"`)}
	}
	if _, ok := sc.mutation.LogicalCores(); !ok {
		return &ValidationError{Name: "logical_cores", err: errors.New(`ent: missing required field "Server.logical_cores"`)}
	}
	if _, ok := sc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "Server.port"`)}
	}
	if _, ok := sc.mutation.CraterProvider(); !ok {
		return &ValidationError{Name: "crater_provider", err: errors.New(`ent: missing required field "Server.crater_provider"`)}
	}
	if _, ok := sc.mutation.Crater(); !ok {
		return &ValidationError{Name: "crater", err: errors.New(`ent: missing required field "Server.crater"`)}
	}
	if _, ok := sc.mutation.CraterVariant(); !ok {
		return &ValidationError{Name: "crater_variant", err: errors.New(`ent: missing required field "Server.crater_variant"`)}
	}
	if _, ok := sc.mutation.ContainerId(); !ok {
		return &ValidationError{Name: "containerId", err: errors.New(`ent: missing required field "Server.containerId"`)}
	}
	if _, ok := sc.mutation.SftpPassword(); !ok {
		return &ValidationError{Name: "sftp_password", err: errors.New(`ent: missing required field "Server.sftp_password"`)}
	}
	return nil
}

func (sc *ServerCreate) sqlSave(ctx context.Context) (*Server, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ServerCreate) createSpec() (*Server, *sqlgraph.CreateSpec) {
	var (
		_node = &Server{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(server.Table, sqlgraph.NewFieldSpec(server.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(server.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(server.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(server.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.RAM(); ok {
		_spec.SetField(server.FieldRAM, field.TypeUint64, value)
		_node.RAM = value
	}
	if value, ok := sc.mutation.Storage(); ok {
		_spec.SetField(server.FieldStorage, field.TypeUint64, value)
		_node.Storage = value
	}
	if value, ok := sc.mutation.LogicalCores(); ok {
		_spec.SetField(server.FieldLogicalCores, field.TypeUint, value)
		_node.LogicalCores = value
	}
	if value, ok := sc.mutation.Port(); ok {
		_spec.SetField(server.FieldPort, field.TypeUint, value)
		_node.Port = value
	}
	if value, ok := sc.mutation.CraterProvider(); ok {
		_spec.SetField(server.FieldCraterProvider, field.TypeString, value)
		_node.CraterProvider = value
	}
	if value, ok := sc.mutation.Crater(); ok {
		_spec.SetField(server.FieldCrater, field.TypeString, value)
		_node.Crater = value
	}
	if value, ok := sc.mutation.CraterVariant(); ok {
		_spec.SetField(server.FieldCraterVariant, field.TypeString, value)
		_node.CraterVariant = value
	}
	if value, ok := sc.mutation.CraterOptions(); ok {
		_spec.SetField(server.FieldCraterOptions, field.TypeJSON, value)
		_node.CraterOptions = value
	}
	if value, ok := sc.mutation.ContainerId(); ok {
		_spec.SetField(server.FieldContainerId, field.TypeString, value)
		_node.ContainerId = value
	}
	if value, ok := sc.mutation.SftpPassword(); ok {
		_spec.SetField(server.FieldSftpPassword, field.TypeString, value)
		_node.SftpPassword = value
	}
	if nodes := sc.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.NodeTable,
			Columns: []string{server.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.node_nodes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.OwnerTable,
			Columns: []string{server.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_owners = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServerCreateBulk is the builder for creating many Server entities in bulk.
type ServerCreateBulk struct {
	config
	builders []*ServerCreate
}

// Save creates the Server entities in the database.
func (scb *ServerCreateBulk) Save(ctx context.Context) ([]*Server, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Server, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ServerCreateBulk) SaveX(ctx context.Context) []*Server {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ServerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ServerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
