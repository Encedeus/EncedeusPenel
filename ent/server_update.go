// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Encedeus/panel/ent/game"
	"github.com/Encedeus/panel/ent/node"
	"github.com/Encedeus/panel/ent/predicate"
	"github.com/Encedeus/panel/ent/server"
	"github.com/Encedeus/panel/ent/user"
	"github.com/google/uuid"
)

// ServerUpdate is the builder for updating Server entities.
type ServerUpdate struct {
	config
	hooks    []Hook
	mutation *ServerMutation
}

// Where appends a list predicates to the ServerUpdate builder.
func (su *ServerUpdate) Where(ps ...predicate.Server) *ServerUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *ServerUpdate) SetCreatedAt(t time.Time) *ServerUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *ServerUpdate) SetNillableCreatedAt(t *time.Time) *ServerUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ServerUpdate) SetUpdatedAt(t time.Time) *ServerUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetRAM sets the "ram" field.
func (su *ServerUpdate) SetRAM(u uint) *ServerUpdate {
	su.mutation.ResetRAM()
	su.mutation.SetRAM(u)
	return su
}

// AddRAM adds u to the "ram" field.
func (su *ServerUpdate) AddRAM(u int) *ServerUpdate {
	su.mutation.AddRAM(u)
	return su
}

// SetStorage sets the "storage" field.
func (su *ServerUpdate) SetStorage(u uint) *ServerUpdate {
	su.mutation.ResetStorage()
	su.mutation.SetStorage(u)
	return su
}

// AddStorage adds u to the "storage" field.
func (su *ServerUpdate) AddStorage(u int) *ServerUpdate {
	su.mutation.AddStorage(u)
	return su
}

// SetLogicalCores sets the "logical_cores" field.
func (su *ServerUpdate) SetLogicalCores(u uint) *ServerUpdate {
	su.mutation.ResetLogicalCores()
	su.mutation.SetLogicalCores(u)
	return su
}

// AddLogicalCores adds u to the "logical_cores" field.
func (su *ServerUpdate) AddLogicalCores(u int) *ServerUpdate {
	su.mutation.AddLogicalCores(u)
	return su
}

// SetPort sets the "port" field.
func (su *ServerUpdate) SetPort(u uint16) *ServerUpdate {
	su.mutation.ResetPort()
	su.mutation.SetPort(u)
	return su
}

// AddPort adds u to the "port" field.
func (su *ServerUpdate) AddPort(u int16) *ServerUpdate {
	su.mutation.AddPort(u)
	return su
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (su *ServerUpdate) SetNodeID(id uuid.UUID) *ServerUpdate {
	su.mutation.SetNodeID(id)
	return su
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (su *ServerUpdate) SetNillableNodeID(id *uuid.UUID) *ServerUpdate {
	if id != nil {
		su = su.SetNodeID(*id)
	}
	return su
}

// SetNode sets the "node" edge to the Node entity.
func (su *ServerUpdate) SetNode(n *Node) *ServerUpdate {
	return su.SetNodeID(n.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (su *ServerUpdate) SetOwnerID(id uuid.UUID) *ServerUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (su *ServerUpdate) SetNillableOwnerID(id *uuid.UUID) *ServerUpdate {
	if id != nil {
		su = su.SetOwnerID(*id)
	}
	return su
}

// SetOwner sets the "owner" edge to the User entity.
func (su *ServerUpdate) SetOwner(u *User) *ServerUpdate {
	return su.SetOwnerID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (su *ServerUpdate) SetGameID(id uuid.UUID) *ServerUpdate {
	su.mutation.SetGameID(id)
	return su
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (su *ServerUpdate) SetNillableGameID(id *uuid.UUID) *ServerUpdate {
	if id != nil {
		su = su.SetGameID(*id)
	}
	return su
}

// SetGame sets the "game" edge to the Game entity.
func (su *ServerUpdate) SetGame(g *Game) *ServerUpdate {
	return su.SetGameID(g.ID)
}

// Mutation returns the ServerMutation object of the builder.
func (su *ServerUpdate) Mutation() *ServerMutation {
	return su.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (su *ServerUpdate) ClearNode() *ServerUpdate {
	su.mutation.ClearNode()
	return su
}

// ClearOwner clears the "owner" edge to the User entity.
func (su *ServerUpdate) ClearOwner() *ServerUpdate {
	su.mutation.ClearOwner()
	return su
}

// ClearGame clears the "game" edge to the Game entity.
func (su *ServerUpdate) ClearGame() *ServerUpdate {
	su.mutation.ClearGame()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServerUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ServerUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := server.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *ServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(server.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(server.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.RAM(); ok {
		_spec.SetField(server.FieldRAM, field.TypeUint, value)
	}
	if value, ok := su.mutation.AddedRAM(); ok {
		_spec.AddField(server.FieldRAM, field.TypeUint, value)
	}
	if value, ok := su.mutation.Storage(); ok {
		_spec.SetField(server.FieldStorage, field.TypeUint, value)
	}
	if value, ok := su.mutation.AddedStorage(); ok {
		_spec.AddField(server.FieldStorage, field.TypeUint, value)
	}
	if value, ok := su.mutation.LogicalCores(); ok {
		_spec.SetField(server.FieldLogicalCores, field.TypeUint, value)
	}
	if value, ok := su.mutation.AddedLogicalCores(); ok {
		_spec.AddField(server.FieldLogicalCores, field.TypeUint, value)
	}
	if value, ok := su.mutation.Port(); ok {
		_spec.SetField(server.FieldPort, field.TypeUint16, value)
	}
	if value, ok := su.mutation.AddedPort(); ok {
		_spec.AddField(server.FieldPort, field.TypeUint16, value)
	}
	if su.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.NodeTable,
			Columns: []string{server.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.NodeTable,
			Columns: []string{server.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.OwnerTable,
			Columns: []string{server.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.OwnerTable,
			Columns: []string{server.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.GameTable,
			Columns: []string{server.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.GameTable,
			Columns: []string{server.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServerUpdateOne is the builder for updating a single Server entity.
type ServerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerMutation
}

// SetCreatedAt sets the "created_at" field.
func (suo *ServerUpdateOne) SetCreatedAt(t time.Time) *ServerUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableCreatedAt(t *time.Time) *ServerUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ServerUpdateOne) SetUpdatedAt(t time.Time) *ServerUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetRAM sets the "ram" field.
func (suo *ServerUpdateOne) SetRAM(u uint) *ServerUpdateOne {
	suo.mutation.ResetRAM()
	suo.mutation.SetRAM(u)
	return suo
}

// AddRAM adds u to the "ram" field.
func (suo *ServerUpdateOne) AddRAM(u int) *ServerUpdateOne {
	suo.mutation.AddRAM(u)
	return suo
}

// SetStorage sets the "storage" field.
func (suo *ServerUpdateOne) SetStorage(u uint) *ServerUpdateOne {
	suo.mutation.ResetStorage()
	suo.mutation.SetStorage(u)
	return suo
}

// AddStorage adds u to the "storage" field.
func (suo *ServerUpdateOne) AddStorage(u int) *ServerUpdateOne {
	suo.mutation.AddStorage(u)
	return suo
}

// SetLogicalCores sets the "logical_cores" field.
func (suo *ServerUpdateOne) SetLogicalCores(u uint) *ServerUpdateOne {
	suo.mutation.ResetLogicalCores()
	suo.mutation.SetLogicalCores(u)
	return suo
}

// AddLogicalCores adds u to the "logical_cores" field.
func (suo *ServerUpdateOne) AddLogicalCores(u int) *ServerUpdateOne {
	suo.mutation.AddLogicalCores(u)
	return suo
}

// SetPort sets the "port" field.
func (suo *ServerUpdateOne) SetPort(u uint16) *ServerUpdateOne {
	suo.mutation.ResetPort()
	suo.mutation.SetPort(u)
	return suo
}

// AddPort adds u to the "port" field.
func (suo *ServerUpdateOne) AddPort(u int16) *ServerUpdateOne {
	suo.mutation.AddPort(u)
	return suo
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (suo *ServerUpdateOne) SetNodeID(id uuid.UUID) *ServerUpdateOne {
	suo.mutation.SetNodeID(id)
	return suo
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableNodeID(id *uuid.UUID) *ServerUpdateOne {
	if id != nil {
		suo = suo.SetNodeID(*id)
	}
	return suo
}

// SetNode sets the "node" edge to the Node entity.
func (suo *ServerUpdateOne) SetNode(n *Node) *ServerUpdateOne {
	return suo.SetNodeID(n.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (suo *ServerUpdateOne) SetOwnerID(id uuid.UUID) *ServerUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableOwnerID(id *uuid.UUID) *ServerUpdateOne {
	if id != nil {
		suo = suo.SetOwnerID(*id)
	}
	return suo
}

// SetOwner sets the "owner" edge to the User entity.
func (suo *ServerUpdateOne) SetOwner(u *User) *ServerUpdateOne {
	return suo.SetOwnerID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (suo *ServerUpdateOne) SetGameID(id uuid.UUID) *ServerUpdateOne {
	suo.mutation.SetGameID(id)
	return suo
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableGameID(id *uuid.UUID) *ServerUpdateOne {
	if id != nil {
		suo = suo.SetGameID(*id)
	}
	return suo
}

// SetGame sets the "game" edge to the Game entity.
func (suo *ServerUpdateOne) SetGame(g *Game) *ServerUpdateOne {
	return suo.SetGameID(g.ID)
}

// Mutation returns the ServerMutation object of the builder.
func (suo *ServerUpdateOne) Mutation() *ServerMutation {
	return suo.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (suo *ServerUpdateOne) ClearNode() *ServerUpdateOne {
	suo.mutation.ClearNode()
	return suo
}

// ClearOwner clears the "owner" edge to the User entity.
func (suo *ServerUpdateOne) ClearOwner() *ServerUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// ClearGame clears the "game" edge to the Game entity.
func (suo *ServerUpdateOne) ClearGame() *ServerUpdateOne {
	suo.mutation.ClearGame()
	return suo
}

// Where appends a list predicates to the ServerUpdate builder.
func (suo *ServerUpdateOne) Where(ps ...predicate.Server) *ServerUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServerUpdateOne) Select(field string, fields ...string) *ServerUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Server entity.
func (suo *ServerUpdateOne) Save(ctx context.Context) (*Server, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServerUpdateOne) SaveX(ctx context.Context) *Server {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ServerUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := server.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *ServerUpdateOne) sqlSave(ctx context.Context) (_node *Server, err error) {
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Server.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, server.FieldID)
		for _, f := range fields {
			if !server.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != server.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(server.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(server.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.RAM(); ok {
		_spec.SetField(server.FieldRAM, field.TypeUint, value)
	}
	if value, ok := suo.mutation.AddedRAM(); ok {
		_spec.AddField(server.FieldRAM, field.TypeUint, value)
	}
	if value, ok := suo.mutation.Storage(); ok {
		_spec.SetField(server.FieldStorage, field.TypeUint, value)
	}
	if value, ok := suo.mutation.AddedStorage(); ok {
		_spec.AddField(server.FieldStorage, field.TypeUint, value)
	}
	if value, ok := suo.mutation.LogicalCores(); ok {
		_spec.SetField(server.FieldLogicalCores, field.TypeUint, value)
	}
	if value, ok := suo.mutation.AddedLogicalCores(); ok {
		_spec.AddField(server.FieldLogicalCores, field.TypeUint, value)
	}
	if value, ok := suo.mutation.Port(); ok {
		_spec.SetField(server.FieldPort, field.TypeUint16, value)
	}
	if value, ok := suo.mutation.AddedPort(); ok {
		_spec.AddField(server.FieldPort, field.TypeUint16, value)
	}
	if suo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.NodeTable,
			Columns: []string{server.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.NodeTable,
			Columns: []string{server.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.OwnerTable,
			Columns: []string{server.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.OwnerTable,
			Columns: []string{server.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.GameTable,
			Columns: []string{server.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.GameTable,
			Columns: []string{server.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Server{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
