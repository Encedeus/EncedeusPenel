// Code generated by ent, DO NOT EDIT.

package server

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Encedeus/panel/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldName, v))
}

// RAM applies equality check predicate on the "ram" field. It's identical to RAMEQ.
func RAM(v uint64) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldRAM, v))
}

// Storage applies equality check predicate on the "storage" field. It's identical to StorageEQ.
func Storage(v uint64) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldStorage, v))
}

// LogicalCores applies equality check predicate on the "logical_cores" field. It's identical to LogicalCoresEQ.
func LogicalCores(v uint) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldLogicalCores, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v uint) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPort, v))
}

// CraterProvider applies equality check predicate on the "crater_provider" field. It's identical to CraterProviderEQ.
func CraterProvider(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCraterProvider, v))
}

// Crater applies equality check predicate on the "crater" field. It's identical to CraterEQ.
func Crater(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCrater, v))
}

// CraterVariant applies equality check predicate on the "crater_variant" field. It's identical to CraterVariantEQ.
func CraterVariant(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCraterVariant, v))
}

// ContainerId applies equality check predicate on the "containerId" field. It's identical to ContainerIdEQ.
func ContainerId(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldContainerId, v))
}

// SftpPassword applies equality check predicate on the "sftp_password" field. It's identical to SftpPasswordEQ.
func SftpPassword(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSftpPassword, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldName, v))
}

// RAMEQ applies the EQ predicate on the "ram" field.
func RAMEQ(v uint64) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldRAM, v))
}

// RAMNEQ applies the NEQ predicate on the "ram" field.
func RAMNEQ(v uint64) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldRAM, v))
}

// RAMIn applies the In predicate on the "ram" field.
func RAMIn(vs ...uint64) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldRAM, vs...))
}

// RAMNotIn applies the NotIn predicate on the "ram" field.
func RAMNotIn(vs ...uint64) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldRAM, vs...))
}

// RAMGT applies the GT predicate on the "ram" field.
func RAMGT(v uint64) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldRAM, v))
}

// RAMGTE applies the GTE predicate on the "ram" field.
func RAMGTE(v uint64) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldRAM, v))
}

// RAMLT applies the LT predicate on the "ram" field.
func RAMLT(v uint64) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldRAM, v))
}

// RAMLTE applies the LTE predicate on the "ram" field.
func RAMLTE(v uint64) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldRAM, v))
}

// StorageEQ applies the EQ predicate on the "storage" field.
func StorageEQ(v uint64) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldStorage, v))
}

// StorageNEQ applies the NEQ predicate on the "storage" field.
func StorageNEQ(v uint64) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldStorage, v))
}

// StorageIn applies the In predicate on the "storage" field.
func StorageIn(vs ...uint64) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldStorage, vs...))
}

// StorageNotIn applies the NotIn predicate on the "storage" field.
func StorageNotIn(vs ...uint64) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldStorage, vs...))
}

// StorageGT applies the GT predicate on the "storage" field.
func StorageGT(v uint64) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldStorage, v))
}

// StorageGTE applies the GTE predicate on the "storage" field.
func StorageGTE(v uint64) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldStorage, v))
}

// StorageLT applies the LT predicate on the "storage" field.
func StorageLT(v uint64) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldStorage, v))
}

// StorageLTE applies the LTE predicate on the "storage" field.
func StorageLTE(v uint64) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldStorage, v))
}

// LogicalCoresEQ applies the EQ predicate on the "logical_cores" field.
func LogicalCoresEQ(v uint) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldLogicalCores, v))
}

// LogicalCoresNEQ applies the NEQ predicate on the "logical_cores" field.
func LogicalCoresNEQ(v uint) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldLogicalCores, v))
}

// LogicalCoresIn applies the In predicate on the "logical_cores" field.
func LogicalCoresIn(vs ...uint) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldLogicalCores, vs...))
}

// LogicalCoresNotIn applies the NotIn predicate on the "logical_cores" field.
func LogicalCoresNotIn(vs ...uint) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldLogicalCores, vs...))
}

// LogicalCoresGT applies the GT predicate on the "logical_cores" field.
func LogicalCoresGT(v uint) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldLogicalCores, v))
}

// LogicalCoresGTE applies the GTE predicate on the "logical_cores" field.
func LogicalCoresGTE(v uint) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldLogicalCores, v))
}

// LogicalCoresLT applies the LT predicate on the "logical_cores" field.
func LogicalCoresLT(v uint) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldLogicalCores, v))
}

// LogicalCoresLTE applies the LTE predicate on the "logical_cores" field.
func LogicalCoresLTE(v uint) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldLogicalCores, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v uint) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v uint) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...uint) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...uint) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v uint) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v uint) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v uint) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v uint) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldPort, v))
}

// CraterProviderEQ applies the EQ predicate on the "crater_provider" field.
func CraterProviderEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCraterProvider, v))
}

// CraterProviderNEQ applies the NEQ predicate on the "crater_provider" field.
func CraterProviderNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldCraterProvider, v))
}

// CraterProviderIn applies the In predicate on the "crater_provider" field.
func CraterProviderIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldCraterProvider, vs...))
}

// CraterProviderNotIn applies the NotIn predicate on the "crater_provider" field.
func CraterProviderNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldCraterProvider, vs...))
}

// CraterProviderGT applies the GT predicate on the "crater_provider" field.
func CraterProviderGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldCraterProvider, v))
}

// CraterProviderGTE applies the GTE predicate on the "crater_provider" field.
func CraterProviderGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldCraterProvider, v))
}

// CraterProviderLT applies the LT predicate on the "crater_provider" field.
func CraterProviderLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldCraterProvider, v))
}

// CraterProviderLTE applies the LTE predicate on the "crater_provider" field.
func CraterProviderLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldCraterProvider, v))
}

// CraterProviderContains applies the Contains predicate on the "crater_provider" field.
func CraterProviderContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldCraterProvider, v))
}

// CraterProviderHasPrefix applies the HasPrefix predicate on the "crater_provider" field.
func CraterProviderHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldCraterProvider, v))
}

// CraterProviderHasSuffix applies the HasSuffix predicate on the "crater_provider" field.
func CraterProviderHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldCraterProvider, v))
}

// CraterProviderEqualFold applies the EqualFold predicate on the "crater_provider" field.
func CraterProviderEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldCraterProvider, v))
}

// CraterProviderContainsFold applies the ContainsFold predicate on the "crater_provider" field.
func CraterProviderContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldCraterProvider, v))
}

// CraterEQ applies the EQ predicate on the "crater" field.
func CraterEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCrater, v))
}

// CraterNEQ applies the NEQ predicate on the "crater" field.
func CraterNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldCrater, v))
}

// CraterIn applies the In predicate on the "crater" field.
func CraterIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldCrater, vs...))
}

// CraterNotIn applies the NotIn predicate on the "crater" field.
func CraterNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldCrater, vs...))
}

// CraterGT applies the GT predicate on the "crater" field.
func CraterGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldCrater, v))
}

// CraterGTE applies the GTE predicate on the "crater" field.
func CraterGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldCrater, v))
}

// CraterLT applies the LT predicate on the "crater" field.
func CraterLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldCrater, v))
}

// CraterLTE applies the LTE predicate on the "crater" field.
func CraterLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldCrater, v))
}

// CraterContains applies the Contains predicate on the "crater" field.
func CraterContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldCrater, v))
}

// CraterHasPrefix applies the HasPrefix predicate on the "crater" field.
func CraterHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldCrater, v))
}

// CraterHasSuffix applies the HasSuffix predicate on the "crater" field.
func CraterHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldCrater, v))
}

// CraterEqualFold applies the EqualFold predicate on the "crater" field.
func CraterEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldCrater, v))
}

// CraterContainsFold applies the ContainsFold predicate on the "crater" field.
func CraterContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldCrater, v))
}

// CraterVariantEQ applies the EQ predicate on the "crater_variant" field.
func CraterVariantEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCraterVariant, v))
}

// CraterVariantNEQ applies the NEQ predicate on the "crater_variant" field.
func CraterVariantNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldCraterVariant, v))
}

// CraterVariantIn applies the In predicate on the "crater_variant" field.
func CraterVariantIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldCraterVariant, vs...))
}

// CraterVariantNotIn applies the NotIn predicate on the "crater_variant" field.
func CraterVariantNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldCraterVariant, vs...))
}

// CraterVariantGT applies the GT predicate on the "crater_variant" field.
func CraterVariantGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldCraterVariant, v))
}

// CraterVariantGTE applies the GTE predicate on the "crater_variant" field.
func CraterVariantGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldCraterVariant, v))
}

// CraterVariantLT applies the LT predicate on the "crater_variant" field.
func CraterVariantLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldCraterVariant, v))
}

// CraterVariantLTE applies the LTE predicate on the "crater_variant" field.
func CraterVariantLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldCraterVariant, v))
}

// CraterVariantContains applies the Contains predicate on the "crater_variant" field.
func CraterVariantContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldCraterVariant, v))
}

// CraterVariantHasPrefix applies the HasPrefix predicate on the "crater_variant" field.
func CraterVariantHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldCraterVariant, v))
}

// CraterVariantHasSuffix applies the HasSuffix predicate on the "crater_variant" field.
func CraterVariantHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldCraterVariant, v))
}

// CraterVariantEqualFold applies the EqualFold predicate on the "crater_variant" field.
func CraterVariantEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldCraterVariant, v))
}

// CraterVariantContainsFold applies the ContainsFold predicate on the "crater_variant" field.
func CraterVariantContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldCraterVariant, v))
}

// CraterOptionsIsNil applies the IsNil predicate on the "crater_options" field.
func CraterOptionsIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldCraterOptions))
}

// CraterOptionsNotNil applies the NotNil predicate on the "crater_options" field.
func CraterOptionsNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldCraterOptions))
}

// ContainerIdEQ applies the EQ predicate on the "containerId" field.
func ContainerIdEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldContainerId, v))
}

// ContainerIdNEQ applies the NEQ predicate on the "containerId" field.
func ContainerIdNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldContainerId, v))
}

// ContainerIdIn applies the In predicate on the "containerId" field.
func ContainerIdIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldContainerId, vs...))
}

// ContainerIdNotIn applies the NotIn predicate on the "containerId" field.
func ContainerIdNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldContainerId, vs...))
}

// ContainerIdGT applies the GT predicate on the "containerId" field.
func ContainerIdGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldContainerId, v))
}

// ContainerIdGTE applies the GTE predicate on the "containerId" field.
func ContainerIdGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldContainerId, v))
}

// ContainerIdLT applies the LT predicate on the "containerId" field.
func ContainerIdLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldContainerId, v))
}

// ContainerIdLTE applies the LTE predicate on the "containerId" field.
func ContainerIdLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldContainerId, v))
}

// ContainerIdContains applies the Contains predicate on the "containerId" field.
func ContainerIdContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldContainerId, v))
}

// ContainerIdHasPrefix applies the HasPrefix predicate on the "containerId" field.
func ContainerIdHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldContainerId, v))
}

// ContainerIdHasSuffix applies the HasSuffix predicate on the "containerId" field.
func ContainerIdHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldContainerId, v))
}

// ContainerIdEqualFold applies the EqualFold predicate on the "containerId" field.
func ContainerIdEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldContainerId, v))
}

// ContainerIdContainsFold applies the ContainsFold predicate on the "containerId" field.
func ContainerIdContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldContainerId, v))
}

// SftpPasswordEQ applies the EQ predicate on the "sftp_password" field.
func SftpPasswordEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSftpPassword, v))
}

// SftpPasswordNEQ applies the NEQ predicate on the "sftp_password" field.
func SftpPasswordNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldSftpPassword, v))
}

// SftpPasswordIn applies the In predicate on the "sftp_password" field.
func SftpPasswordIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldSftpPassword, vs...))
}

// SftpPasswordNotIn applies the NotIn predicate on the "sftp_password" field.
func SftpPasswordNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldSftpPassword, vs...))
}

// SftpPasswordGT applies the GT predicate on the "sftp_password" field.
func SftpPasswordGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldSftpPassword, v))
}

// SftpPasswordGTE applies the GTE predicate on the "sftp_password" field.
func SftpPasswordGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldSftpPassword, v))
}

// SftpPasswordLT applies the LT predicate on the "sftp_password" field.
func SftpPasswordLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldSftpPassword, v))
}

// SftpPasswordLTE applies the LTE predicate on the "sftp_password" field.
func SftpPasswordLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldSftpPassword, v))
}

// SftpPasswordContains applies the Contains predicate on the "sftp_password" field.
func SftpPasswordContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldSftpPassword, v))
}

// SftpPasswordHasPrefix applies the HasPrefix predicate on the "sftp_password" field.
func SftpPasswordHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldSftpPassword, v))
}

// SftpPasswordHasSuffix applies the HasSuffix predicate on the "sftp_password" field.
func SftpPasswordHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldSftpPassword, v))
}

// SftpPasswordEqualFold applies the EqualFold predicate on the "sftp_password" field.
func SftpPasswordEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldSftpPassword, v))
}

// SftpPasswordContainsFold applies the ContainsFold predicate on the "sftp_password" field.
func SftpPasswordContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldSftpPassword, v))
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		p(s.Not())
	})
}
